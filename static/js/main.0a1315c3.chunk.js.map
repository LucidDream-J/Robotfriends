{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/Scroll.jsx","components/SearchBox.jsx","components/ErrorBoundry.jsx","containers/App.jsx","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardsArray","map","item","i","key","Scroll","props","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchvalue","target","value","fetch","then","response","json","users","filterRobos","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4SAceA,G,MAXF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAEzB,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAG,+BAA0BF,GAAMG,IAAI,UAC5C,iCAAM,gCAAOL,GAAb,KACA,iCAAM,+BAAMC,GAAZ,QCqCGK,EA3CE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GAKnC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAKvB,OAAO,yBAAKE,UAAU,kBAAkBK,ICP3BK,G,MARA,SAACC,GACZ,OACI,yBAAKX,UAAU,UACdW,EAAMC,YCOAC,EAZG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKd,UAAW,OACd,2BAAOA,UAAU,mCAChBe,KAAK,SAASC,YAAY,gBAC1BC,SAAYH,MCeJI,E,kDAnBb,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IACDQ,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,+DAEJG,KAAKZ,MAAMC,a,GAhBGa,aCkDZC,G,wDA5Cb,aAAe,IAAD,8BACZ,gBAcFC,eAAiB,SAAAC,GACf,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAd1C,EAAKZ,MAAQ,CACXf,OAAQ,GACRyB,YAAa,IAJH,E,gEAQO,IAAD,OAElBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEpB,OAAQgC,S,+BAOjC,IAAD,OAEDC,EAAcd,KAAKJ,MAAMf,OAAOkC,QAAO,SAAAC,GAC3C,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAGlE,OAAiC,IAA7BjB,KAAKJ,MAAMf,OAAOsC,OACb,wBAAI1C,UAAU,UAAd,aAGL,yBAAKA,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAcS,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUvB,OAAQiC,W,GAnCVZ,cCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.0a1315c3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css'\r\n\r\nconst Card = ({ name, email, id}) => {\r\n   \r\n    return(\r\n        <div className='Card bg-light-green  br3 grow shadow-5'>\r\n            <img src={`https://robohash.org/${id}`} alt='robot'/>\r\n            <div> <h2> { name}</h2> </div>\r\n            <div> <p> { email}</p> </div>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardsArray = robots.map((item, i) => {\r\n\r\n    // if(true){\r\n    //   throw new Error(\"Noooooooooo\")\r\n    // }\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <div className=\"grid-container\">{cardsArray}</div>;\r\n};\r\n\r\n//version 2 syntax\r\n\r\n// const CardList = ({robots}) => {\r\n   \r\n\r\n//     return (\r\n//         <div className='grid-container'>\r\n//     {\r\n    \r\n//         robots.map((item, i) => {\r\n//             return(\r\n//                 <Card \r\n//                     key={i} \r\n//                     id={robots[i].id} \r\n//                     name={robots[i].name} \r\n//                     email={robots[i].email}  \r\n//                 />\r\n//             );\r\n//         })\r\n//     }\r\n//         </div>\r\n//     );\r\n//     }\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './Scroll.css'\r\n\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div className='scroll'> \r\n        {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className= 'pa3'>\r\n      <input className='pa3 ba b--green bg-lightest-blue'\r\n       type=\"search\" placeholder=\"search robots\" \r\n       onChange = {searchChange}\r\n       />\r\n       \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n      this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n      if(this.state.hasError){\r\n          return <h1> Error has occured ... Not Good</h1>\r\n      }\r\n      return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchvalue: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //online json info\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ robots: users }));\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchvalue: event.target.value });\r\n  };\r\n\r\n  render() {\r\n\r\n    const filterRobos = this.state.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.state.searchvalue.toLowerCase());\r\n    })\r\n\r\n    if (this.state.robots.length === 0) {\r\n      return <h1 className='tc red'> Loading </h1>\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll> \r\n          <ErrorBoundry>\r\n          <CardList robots={filterRobos} />\r\n          </ErrorBoundry>\r\n          </Scroll>\r\n          \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}